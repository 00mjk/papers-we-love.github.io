{"221994661":{"url":"https://www.meetup.com/Papers-We-Love-Berlin/events/221994661/","description":"<p>At this Papers We Love Berlin Meetup we will have Marijn Haverbeke (<a href=\"https://twitter.com/marijnjh\" class=\"linkified\">https://twitter.com/marijnjh</a>) presenting the original Lisp paper \"Recursive Functions of Symbolic Expressions and Their Computation by Machine\" by John McCarthy.</p> <p>PDF: <a href=\"http://www-formal.stanford.edu/jmc/recursive.pdf\"><a href=\"http://www-formal.stanford.edu/jmc/recursive.pdf\" class=\"linkified\">http://www-formal.stanford.edu/jmc/recursive.pdf</a></a> </p> <p>Thanks to Soundcloud for hosting this event! </p> <p><br/>Abstract:</p> <p>There are works that, rather than continuing in an existing research tradition, invent a whole new direction. John McCarthy's original paper on Lisp is definitely one such work. It obviously set the stage for the various Lisps and Lisp-inspired languages, but it also pioneered a number of concepts, ranging from garbage collection to the call stack, that are deeply ingrained in today's programming reality. This talk will be mostly about historical perspective (and will not involve Lisp smugness or propaganda).</p> <p><br/>Bio:</p> <p>Marijn Haverbeke spent his early career living in the past and programming Common Lisp. When reality finally caught up with him he gave that up and became a JavaScript programmer instead. Author of CodeMirror and Eloquent JavaScript. Contributor to the Rust compiler.</p> ","photos":[],"venue":{"lat":52.53683853149414,"address1":"Rheinsberger Str. 76/77 10115","address2":null,"name":"SoundCloud","postalCode":null,"lon":13.394927978515625,"country":"de","city":"Berlin"},"utcOffset":7200000,"time":1432225800000,"title":"#2 => Programming concepts pioneered by McCarthy's 1960 paper on Lisp"},"218874529":{"url":"https://www.meetup.com/Papers-We-Love-Berlin/events/218874529/","description":"<p>For the very first Papers We Love Berlin Meetup, we will have Erik Michaels-Ober from SoundCloud presenting the paper Soft Typing by Robert Cartwright and Mike Fagan.</p> <p>This is particularly interesting for Rubyists, because Ruby 3.0 might ship with such a type system.</p> <p>Abstract:</p> <p>This paper presents a soft type systems that retains the expressiveness of dynamic typing, but offers the early error detection and improved optimization capabilities of static typing. The key idea underlying soft typing is that a type checker need not reject programs containing \"ill-typed\" phrases. Instead, the type checker can insert explicit run-time checks, transforming \"ill-typed\" programs into type-correct ones.</p> <p>PDF: <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.9333&amp;rep=rep1&amp;type=pdf\"><a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.9333&amp;rep=rep1&amp;type=pdf\" class=\"linkified\">http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.9333&amp;rep=rep1&amp;type=pdf</a></a></p> <p>Thanks to ResearchGate for hosting this first edition!</p> ","photos":[],"venue":{"lat":52.530799865722656,"address1":"Invalidenstr. 115","address2":null,"name":"ResearchGate","postalCode":null,"lon":13.384476661682129,"country":"de","city":"Berlin"},"utcOffset":3600000,"time":1418149800000,"title":"#1 => Erik Michaels-Ober on Soft Typing"}}